ext.readSdkDir = {
    def sdkDir = null
    [
            System.getenv("ANDROID_HOME"),
            System.getenv("ANDROID_SDK"),
            "/usr/local/opt/android-sdk", // brew --prefix android-sdk
            "/Applications/Android Studio.app/sdk"
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            sdkDir = dir
        }
    }
    return sdkDir
}

ext.readNdkDir = {
    def ndkDir = null
    [
            System.getenv("ANDROID_NDK"),
            "/usr/local/opt/android-ndk", // brew --prefix android-ndk
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            ndkDir = dir
        }
    }
    return ndkDir
}


ext.installRequiredSdk = { appExtension ->
    def compileSdkVersion = appExtension.compileSdkVersion
    def buildToolsRevision = appExtension.buildToolsRevision

    if (compileSdkVersion == null || buildToolsRevision == null) {
        throw new IllegalArgumentException("compileSdkVersion and buildToolsRevision must not be null")
        return
    }

    def sdkDir = readSdkDir()
    if (sdkDir == null) {
        throw new GradleException("ANDROID_HOME/ANDROID_SDK does not exist")
        return
    }

    def workers = []
    buildComponents(sdkDir, compileSdkVersion, buildToolsRevision).each { component ->
        workers.add(Thread.start{ runInstall(sdkDir, component) })
    }
    workers*.join()
}

private def buildComponents(sdkDir, compileSdkVersion, buildToolsRevision) {
    def components = []

    def platformDir = "${sdkDir}/platforms/${compileSdkVersion}"
    if (!file(platformDir).exists()) {
        components.add("android-${compileSdkVersion}")
        println "[platform] ${platformDir} is not installed"
    }
    def buildToolDir = "${sdkDir}/build-tools/${buildToolsRevision}"
    if (!file(buildToolDir).exists()) {
        components.add("build-tools-${buildToolsRevision}")
        println "[build tools] ${buildToolDir} is not installed"
    }

    return components
}

private def runInstall(sdkDir, component) {
    def android = "$sdkDir/tools/android"

    def leftProc = "echo y".execute()
    def rightProc = [
            "${android}",
            "update",
            "sdk",
            "--no-ui",
            "-a",
            "--filter",
            "${component}"].execute()

    pipe(leftProc, rightProc)
}

private def pipe(leftProc, rightProc) {
    leftProc | rightProc
    rightProc.in.eachLine { line -> println line }
    rightProc.waitFor()
}
