ext.readSdkDir = {
    def sdkDir = null
    [
            System.getenv("ANDROID_SDK"),
            "/usr/local/opt/android-sdk", // brew --prefix android-sdk
            "/Applications/Android Studio.app/sdk"
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            sdkDir = dir
        }
    }
    return sdkDir
}

ext.readNdkDir = {
    def ndkDir = null
    [
            System.getenv("ANDROID_NDK"),
            "/usr/local/opt/android-ndk", // brew --prefix android-ndk
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            ndkDir = dir
        }
    }
    return ndkDir
}

ext.installRequiredSdk = { compileSdkVersion, buildToolsVersion ->
    if (compileSdkVersion == null || buildToolsVersion == null) {
        throw new IllegalArgumentException("compileSdkVersion and buildToolsVersion must not be null")
        return
    }

    def sdkDir = readSdkDir()
    if (sdkDir == null) {
        throw new GradleException("ANDROID_HOME/ANDROID_SDK does not exist")
        return
    }

    buildComponents(sdkDir, compileSdkVersion, buildToolsVersion).each {
        runInstall(sdkDir, it)
    }
}

private def buildComponents(sdkDir, compileSdkVersion, buildToolsVersion) {
    def components = []

    if (file("${sdkDir}/platforms/android-${compileSdkVersion}").exists()) {
        components.add("android-${compileSdkVersion}")
        println "[platform] android-${compileSdkVersion} is not installed"
    }
    if (file("${sdkDir}/build-tools/${buildToolsVersion}").exists()) {
        components.add("build-tools-${buildToolsVersion}")
        println "[build tools] build-tools-${buildToolsVersion} is not installed"
    }

    return components
}

private def runInstall(sdkDir, component) {
    def android = "$sdkDir/tools/android"

    def leftProc = "echo y".execute()
    def rightProc = [
            "${android}",
            "update",
            "sdk",
            "--no-ui",
            "-a",
            "--filter",
            "${component}"].execute()

    pipe(leftProc, rightProc)
}

private def pipe(leftProc, rightProc) {
    leftProc | rightProc
    rightProc.in.eachLine { line -> println line }
    rightProc.waitFor()
}
